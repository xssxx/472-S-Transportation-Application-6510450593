name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - develop

jobs:
  test_and_build_backend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Set up Maven Cache
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set environment variables from secrets
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "STRIPE_TEST_KEY=${{ secrets.STRIPE_TEST_KEY }}" >> $GITHUB_ENV
          echo "SPRING_EMAIL_SENDER_HOST=${{ secrets.SPRING_EMAIL_SENDER_HOST }}" >> $GITHUB_ENV
          echo "SPRING_MAIL_USERNAME=${{ secrets.SPRING_MAIL_USERNAME }}" >> $GITHUB_ENV
          echo "SPRING_MAIL_PASSWORD=${{ secrets.SPRING_MAIL_PASSWORD }}" >> $GITHUB_ENV

      - name: Run Unit Tests (JUnit)
        run: |
          cd backend
          mvn clean install -DskipTests=false
          mvn test

      - name: Build Spring Boot Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-backend:latest -f backend/Dockerfile backend

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Spring Boot Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-backend:latest

  build_and_push_frontend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies and Build
        run: |
          cd frontend
          npm install
          npm run build

      - name: Build Vue.js Frontend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/vue-frontend:latest -f frontend/Dockerfile frontend

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Vue.js Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/vue-frontend:latest

  build_and_release_main:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build Spring Boot Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-backend:latest -f backend/Dockerfile backend

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Spring Boot Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-backend:latest

      - name: Build Vue.js Frontend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/vue-frontend:latest -f frontend/Dockerfile frontend

      - name: Push Vue.js Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/vue-frontend:latest

      - name: Generate and Push Tag
        run: |
          TAG="v$(date +'%Y.%m.%d.%H%M%S')" # ใช้ . แบ่งปี, เดือน, วัน
          git tag $TAG
          git push origin $TAG

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: $TAG
          release_name: "Release $TAG"
          draft: false
          prerelease: false
          token: ${{ secrets.MY_GITHUB_TOKEN }}
